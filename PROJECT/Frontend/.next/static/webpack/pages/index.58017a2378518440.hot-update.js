"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAttendance: function() { return /* binding */ getAttendance; },\n/* harmony export */   searchQuery: function() { return /* binding */ searchQuery; }\n/* harmony export */ });\n// // // // src/services/api.ts\n// // // interface BackendResponse {\n// // //     generated_response: string;\n// // //     error?: string;\n// // // }\n// // // interface AttendanceResponse {\n// // //     roll_number: string;\n// // //     attendance: string;\n// // //     error?: string;\n// // // }\n// // // export const searchQuery = async (query: string): Promise<{ summary: string; results: string[] }> => {\n// // //     try {\n// // //         const response = await fetch('http://localhost:5000/search', {\n// // //             method: 'POST',\n// // //             headers: {\n// // //                 'Content-Type': 'application/json',\n// // //             },\n// // //             body: JSON.stringify({ query }),\n// // //         });\n// // //         const data: BackendResponse = await response.json();\n// // //         if (response.ok && data.generated_response) {\n// // //             return { summary: data.generated_response, results: [] };\n// // //         } else {\n// // //             return { summary: data.error || 'Sorry, I couldn’t process that. Can you try again?', results: [] };\n// // //         }\n// // //     } catch (error) {\n// // //         console.error('Error fetching response from Flask backend:', error);\n// // //         throw new Error('Failed to fetch response from the server.');\n// // //     }\n// // // };\n// // // export const getAttendance = async (rollNumber: string): Promise<{ rollNumber: string; attendance: string }> => {\n// // //     try {\n// // //         const response = await fetch('http://localhost:5000/get-attendance', {\n// // //             method: 'POST',\n// // //             headers: {\n// // //                 'Content-Type': 'application/json',\n// // //             },\n// // //             body: JSON.stringify({ rollNumber }),\n// // //         });\n// // //         const data: AttendanceResponse = await response.json();\n// // //         if (response.ok && data.attendance) {\n// // //             return { rollNumber: data.roll_number, attendance: data.attendance };\n// // //         } else {\n// // //             throw new Error(data.error || 'Failed to fetch attendance.');\n// // //         }\n// // //     } catch (error) {\n// // //         console.error('Error fetching attendance:', error);\n// // //         throw error;\n// // //     }\n// // //   };\n// // const API_BASE_URL = \"https://bbd9-2405-201-c006-5003-c17a-bec3-7663-496d.ngrok-free.app\";\n// // interface BackendResponse {\n// //     generated_response: string;\n// //     error?: string;\n// // }\n// // interface AttendanceResponse {\n// //     roll_number: string;\n// //     attendance: string;\n// //     error?: string;\n// // }\n// // export const searchQuery = async (query: string): Promise<{ summary: string; results: string[] }> => {\n// //     try {\n// //         const response = await fetch(`${API_BASE_URL}/search`, {\n// //             method: 'POST',\n// //             headers: {\n// //                 'Content-Type': 'application/json',\n// //             },\n// //             body: JSON.stringify({ query }),\n// //         });\n// //         const data: BackendResponse = await response.json();\n// //         if (response.ok && data.generated_response) {\n// //             return { summary: data.generated_response, results: [] };\n// //         } else {\n// //             return { summary: data.error || 'Sorry, I couldn’t process that. Can you try again?', results: [] };\n// //         }\n// //     } catch (error) {\n// //         console.error('Error fetching response from Flask backend:', error);\n// //         throw new Error('Failed to fetch response from the server.');\n// //     }\n// // };\n// // export const getAttendance = async (rollNumber: string): Promise<{ rollNumber: string; attendance: string }> => {\n// //     try {\n// //         const response = await fetch(`${API_BASE_URL}/get-attendance`, {\n// //             method: 'POST',\n// //             headers: {\n// //                 'Content-Type': 'application/json',\n// //             },\n// //             body: JSON.stringify({ rollNumber }),\n// //         });\n// //         const data: AttendanceResponse = await response.json();\n// //         if (response.ok && data.attendance) {\n// //             return { rollNumber: data.roll_number, attendance: data.attendance };\n// //         } else {\n// //             throw new Error(data.error || 'Failed to fetch attendance.');\n// //         }\n// //     } catch (error) {\n// //         console.error('Error fetching attendance:', error);\n// //         throw error;\n// //     }\n// // };\n// const API_BASE_URL = \"https://bbd9-2405-201-c006-5003-c17a-bec3-7663-496d.ngrok-free.app\";\n// interface BackendResponse {\n//     generated_response: string;\n//     error?: string;\n// }\n// interface AttendanceResponse {\n//     url: boolean;\n//     message: string;\n//     roll_number: string;\n//     attendance: string;\n//     error?: string;\n// }\n// export const searchQuery = async (query: string): Promise<{ summary: string; results: string[] }> => {\n//     try {\n//         const response = await fetch(`${API_BASE_URL}/search`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ query }),\n//         });\n//         const data: BackendResponse = await response.json();\n//         if (response.ok && data.generated_response) {\n//             return { summary: data.generated_response, results: [] };\n//         } else {\n//             return { summary: data.error || 'Sorry, I couldn’t process that. Can you try again?', results: [] };\n//         }\n//     } catch (error) {\n//         console.error('Error fetching response from Flask backend:', error);\n//         throw new Error('Failed to fetch response from the server.');\n//     }\n// };\n// export const getAttendance = async (rollNumber: string): Promise<{ message: string; url: string }> => {\n//     try {\n//         const response = await fetch(`${API_BASE_URL}/get-attendance`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ rollNumber }),\n//         });\n//         const data: AttendanceResponse = await response.json();\n//         if (response.ok && data.url) {\n//             return { message: data.message, url: data.url };\n//         } else {\n//             throw new Error(data.error || 'Failed to fetch attendance.');\n//         }\n//     } catch (error) {\n//         console.error('Error fetching attendance:', error);\n//         throw error;\n//     }\n// };\nconst API_BASE_URL = \"https://8a0c-2401-4900-367a-7ff0-214c-31c5-6c92-4714.ngrok-free.app\";\nconst searchQuery = async (query)=>{\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/search\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                query\n            })\n        });\n        const data = await response.json();\n        if (response.ok && data.generated_response) {\n            return {\n                summary: data.generated_response,\n                results: []\n            };\n        } else {\n            return {\n                summary: data.error || \"Sorry, I couldn’t process that. Can you try again?\",\n                results: []\n            };\n        }\n    } catch (error) {\n        console.error(\"Error fetching response from Flask backend:\", error);\n        throw new Error(\"Failed to fetch response from the server.\");\n    }\n};\nconst getAttendance = async (rollNumber)=>{\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/get-attendance\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                rollNumber\n            })\n        });\n        const data = await response.json();\n        if (response.ok && data.url && data.message) {\n            return {\n                message: data.message,\n                url: data.url\n            };\n        } else {\n            throw new Error(data.error || \"Failed to fetch attendance.\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching attendance:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});