"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/ChatbotInterface.tsx":
/*!*********************************************!*\
  !*** ./src/components/ChatbotInterface.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ChatWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChatWindow */ \"./src/components/ChatWindow.tsx\");\n/* harmony import */ var _ChatbotButton__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ChatbotButton */ \"./src/components/ChatbotButton.tsx\");\n/* harmony import */ var _services_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/api */ \"./src/services/api.ts\");\n// src/components/ChatbotInterface.tsx\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst ChatbotInterface = ()=>{\n    _s();\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        {\n            text: \"Hello! I am Vidya, your KMIT assistant. How can I help you today?\",\n            sender: \"bot\",\n            timestamp: new Date()\n        }\n    ]);\n    const [isTyping, setIsTyping] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleSendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async function(query, response) {\n        let requiresBackend = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        // Add the user query as a user message (unless it's a backend response for \"Check Attendance\")\n        if (!(requiresBackend && response === \"checkAttendance\")) {\n            const newUserMessage = {\n                text: query,\n                sender: \"user\",\n                timestamp: new Date()\n            };\n            setMessages((prevMessages)=>[\n                    ...prevMessages,\n                    newUserMessage\n                ]);\n        }\n        setIsTyping(true);\n        try {\n            // Normalize query for keyword detection\n            const lowerQuery = query.toLowerCase();\n            // Handle attendance queries\n            if (requiresBackend && response === \"checkAttendance\") {\n                const botMessage = {\n                    text: \"Check your attendance here on the Spectra website:\",\n                    sender: \"bot\",\n                    timestamp: new Date(),\n                    buttons: [\n                        {\n                            label: \"Check Attendance\",\n                            onClick: ()=>window.open(\"https://spectra-beta.vercel.app/search\", \"_blank\")\n                        }\n                    ]\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            } else if (lowerQuery.includes(\"attendance\")) {\n                const botMessage = {\n                    text: \"Check your attendance here on the Spectra website:\",\n                    sender: \"bot\",\n                    timestamp: new Date(),\n                    buttons: [\n                        {\n                            label: \"Check Attendance\",\n                            onClick: ()=>window.open(\"https://spectra-beta.vercel.app/search\", \"_blank\")\n                        }\n                    ]\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            } else if (lowerQuery.includes(\"cutoff\") || lowerQuery.includes(\"cut-off\") || lowerQuery.includes(\"rank\") || lowerQuery.includes(\"last rank\")) {\n                const botMessage = {\n                    text: \"You can check the latest cutoff ranks for KMIT admissions here:\",\n                    sender: \"bot\",\n                    timestamp: new Date(),\n                    buttons: [\n                        {\n                            label: \"EAPCET Cutoff\",\n                            onClick: ()=>window.open(\"https://kmit.in/admissions/eapcet-lastrank.php\", \"_blank\")\n                        },\n                        {\n                            label: \"ECET Cutoff\",\n                            onClick: ()=>window.open(\"https://kmit.in/admissions/ecet-lastrank.php\", \"_blank\")\n                        }\n                    ]\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            } else if (lowerQuery.includes(\"placement\") || lowerQuery.includes(\"job\") || lowerQuery.includes(\"recruitment\") || lowerQuery.includes(\"hiring\")) {\n                const botMessage = {\n                    text: \"Success Stories\\n            KMIT continues to maintain the streak of record placements for the 2023-2024 batch. So far, 103 companies have visited the campus, and 662 offers have been rolled out. Out of 557 registered students, 511* got placed with an average salary of ₹9.69 LPA.\\n            \\n            Highlights:\\n            1. 10 students received job offers with salaries of more than ₹40 LPA.\\n            2. 6 students received job offers with salaries between ₹20 and ₹40 LPA.\\n            3. 61 students received job offers with salaries between ₹15 and ₹20 LPA.\\n            4. 149 students received job offers with salaries between ₹10 and ₹15 LPA.\\n            5. 71 students received job offers with salaries between ₹8 and ₹10 LPA.\\n            6. 174 students received job offers with salaries between ₹6 and ₹8 LPA.\\n            7. 63 students received job offers with salaries between ₹5 and ₹6 LPA.\\n            \\n            You can check the latest placement details for KMIT here:\",\n                    sender: \"bot\",\n                    timestamp: new Date(),\n                    buttons: [\n                        {\n                            label: \"Placement Details\",\n                            onClick: ()=>window.open(\"https://kmit.in/placements/placement.php\", \"_blank\")\n                        }\n                    ]\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            } else if (response && !requiresBackend) {\n                const botMessage = {\n                    text: response,\n                    sender: \"bot\",\n                    timestamp: new Date()\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            } else {\n                const { summary } = await (0,_services_api__WEBPACK_IMPORTED_MODULE_4__.searchQuery)(query);\n                const botMessage = {\n                    text: summary,\n                    sender: \"bot\",\n                    timestamp: new Date()\n                };\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        botMessage\n                    ]);\n            }\n        } catch (error) {\n            console.error(\"Error processing message:\", error);\n            const botMessage = {\n                text: \"Sorry, I encountered an error. Please try again.\",\n                sender: \"bot\",\n                timestamp: new Date()\n            };\n            setMessages((prevMessages)=>[\n                    ...prevMessages,\n                    botMessage\n                ]);\n        } finally{\n            setIsTyping(false);\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ChatbotButton__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                onClick: ()=>setIsOpen(true)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\HIRAL\\\\OneDrive\\\\Documents\\\\chatbot\\\\chatbot-main\\\\chatbot-main\\\\PROJECT\\\\Frontend\\\\src\\\\components\\\\ChatbotInterface.tsx\",\n                lineNumber: 151,\n                columnNumber: 13\n            }, undefined),\n            isOpen && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ChatWindow__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                messages: messages,\n                onClose: ()=>setIsOpen(false),\n                onSendMessage: handleSendMessage,\n                isTyping: isTyping\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\HIRAL\\\\OneDrive\\\\Documents\\\\chatbot\\\\chatbot-main\\\\chatbot-main\\\\PROJECT\\\\Frontend\\\\src\\\\components\\\\ChatbotInterface.tsx\",\n                lineNumber: 153,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(ChatbotInterface, \"Vc3iD3IIq4h3wmtYkZW+HgYhPZg=\");\n_c = ChatbotInterface;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChatbotInterface);\nvar _c;\n$RefreshReg$(_c, \"ChatbotInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ChatbotInterface.tsx\n"));

/***/ }),

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAttendance: function() { return /* binding */ getAttendance; },\n/* harmony export */   searchQuery: function() { return /* binding */ searchQuery; }\n/* harmony export */ });\n// // src/services/api.ts\n// interface BackendResponse {\n//     generated_response: string;\n//     error?: string;\n// }\n// interface AttendanceResponse {\n//     roll_number: string;\n//     attendance: string;\n//     error?: string;\n// }\n// export const searchQuery = async (query: string): Promise<{ summary: string; results: string[] }> => {\n//     try {\n//         const response = await fetch('http://localhost:5000/search', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ query }),\n//         });\n//         const data: BackendResponse = await response.json();\n//         if (response.ok && data.generated_response) {\n//             return { summary: data.generated_response, results: [] };\n//         } else {\n//             return { summary: data.error || 'Sorry, I couldn’t process that. Can you try again?', results: [] };\n//         }\n//     } catch (error) {\n//         console.error('Error fetching response from Flask backend:', error);\n//         throw new Error('Failed to fetch response from the server.');\n//     }\n// };\n// export const getAttendance = async (rollNumber: string): Promise<{ rollNumber: string; attendance: string }> => {\n//     try {\n//         const response = await fetch('http://localhost:5000/get-attendance', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ rollNumber }),\n//         });\n//         const data: AttendanceResponse = await response.json();\n//         if (response.ok && data.attendance) {\n//             return { rollNumber: data.roll_number, attendance: data.attendance };\n//         } else {\n//             throw new Error(data.error || 'Failed to fetch attendance.');\n//         }\n//     } catch (error) {\n//         console.error('Error fetching attendance:', error);\n//         throw error;\n//     }\n//   };\nconst API_BASE_URL = \"https://2628-49-43-224-133.ngrok-free.app\";\nconst searchQuery = async (query)=>{\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/search\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                query\n            })\n        });\n        const data = await response.json();\n        if (response.ok && data.generated_response) {\n            return {\n                summary: data.generated_response,\n                results: []\n            };\n        } else {\n            return {\n                summary: data.error || \"Sorry, I couldn’t process that. Can you try again?\",\n                results: []\n            };\n        }\n    } catch (error) {\n        console.error(\"Error fetching response from Flask backend:\", error);\n        throw new Error(\"Failed to fetch response from the server.\");\n    }\n};\nconst getAttendance = async (rollNumber)=>{\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/get-attendance\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                rollNumber\n            })\n        });\n        const data = await response.json();\n        if (response.ok && data.attendance) {\n            return {\n                rollNumber: data.roll_number,\n                attendance: data.attendance\n            };\n        } else {\n            throw new Error(data.error || \"Failed to fetch attendance.\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching attendance:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});